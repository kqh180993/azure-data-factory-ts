{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-teamsoft-kqh"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_TRAN_CLEAN_MOVIES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Transformaciones Plata"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_Parquet_Movies",
								"type": "DatasetReference"
							},
							"name": "SourceADLSMovies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_CSV_Movies",
								"type": "DatasetReference"
							},
							"name": "SinkUpsertIfTrue"
						}
					],
					"transformations": [
						{
							"name": "SelectMovies"
						},
						{
							"name": "FilterMovies"
						},
						{
							"name": "DerivedColumnGener"
						},
						{
							"name": "WindowRankingRating"
						},
						{
							"name": "CastConvertRanking"
						},
						{
							"name": "AggregateRankings"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          RottenTomato as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SourceADLSMovies",
						"SourceADLSMovies select(mapColumn(",
						"          {Película} = movie,",
						"          {Título} = title,",
						"          {Géneros} = genres,",
						"          {Año} = year,",
						"          RottenTomatoes = RottenTomato",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMovies",
						"SelectMovies filter(toInteger({Año})>1950) ~> FilterMovies",
						"FilterMovies derive({Género Primario} = iif(locate('|', {Géneros})>1, left({Géneros}, locate('|', {Géneros})-1), {Géneros})) ~> DerivedColumnGener",
						"CastConvertRanking window(over({Género Primario},",
						"          {Año}),",
						"     desc(RottenTomatoes, true),",
						"     RankingRatings = rank()) ~> WindowRankingRating",
						"DerivedColumnGener cast(output(",
						"          RottenTomatoes as integer",
						"     ),",
						"     errors: true) ~> CastConvertRanking",
						"WindowRankingRating aggregate(groupBy({Género Primario},",
						"          {Año}),",
						"     {Rating Promedio} = avg(RottenTomatoes),",
						"          {Mejor Rating} = first({Título}),",
						"          {Peor Rating} = last({Título}),",
						"          {Nro Películas} = count()) ~> AggregateRankings",
						"AggregateRankings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkUpsertIfTrue"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_TRAN_UpdateCustomerDimension')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_Tailspin_CustomerSource",
								"type": "DatasetReference"
							},
							"name": "SourceDB"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_Tailspin_DimCustomer14",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_Tailspin_DimCustomer14",
								"type": "DatasetReference"
							},
							"name": "SinkDimCustomer14"
						}
					],
					"transformations": [
						{
							"name": "CreateCustomerHash"
						},
						{
							"name": "ExistHash"
						},
						{
							"name": "LookupCustomerID"
						},
						{
							"name": "SetDates"
						},
						{
							"name": "AllowUpserts"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceDB",
						"source(output(",
						"          CustomerID as integer,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          InsertedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          HashKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     batchSize: 0,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"SourceDB derive(HashKey = sha2(256, iifNull(Title,'') + FirstName + iifNull(MiddleName,'') + LastName + iifNull(Suffix,'') + iifNull(CompanyName,'') + iifNull(SalesPerson,'') + iifNull(EmailAddress,'') + iifNull(Phone,''))) ~> CreateCustomerHash",
						"CreateCustomerHash, DimCustomer exists(CreateCustomerHash@HashKey == DimCustomer@HashKey,",
						"     negate:true,",
						"     broadcast: 'auto')~> ExistHash",
						"ExistHash, DimCustomer lookup(SourceDB@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCustomerID",
						"LookupCustomerID derive(InsertedDate = iif(isNull(InsertedDate), currentTimestamp(), {InsertedDate}),",
						"          ModifiedDate = currentTimestamp()) ~> SetDates",
						"SetDates alterRow(upsertIf(true())) ~> AllowUpserts",
						"AllowUpserts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          InsertedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          HashKey as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = SourceDB@CustomerID,",
						"          Title = SourceDB@Title,",
						"          FirstName = SourceDB@FirstName,",
						"          MiddleName = SourceDB@MiddleName,",
						"          LastName = SourceDB@LastName,",
						"          Suffix = SourceDB@Suffix,",
						"          CompanyName = SourceDB@CompanyName,",
						"          SalesPerson = SourceDB@SalesPerson,",
						"          EmailAddress = SourceDB@EmailAddress,",
						"          Phone = SourceDB@Phone,",
						"          InsertedDate,",
						"          ModifiedDate,",
						"          HashKey = CreateCustomerHash@HashKey",
						"     )) ~> SinkDimCustomer14"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DS_ADLS_XLSX_Departamento",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DS_ADLS_XLSX_Departamento",
							"dataset": {
								"referenceName": "DS_ADLS_XLSX_Departamento",
								"type": "DatasetReference"
							}
						},
						{
							"name": "DS_ADLS_XLSX_Zona",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DS_ADLS_XLSX_Zona",
							"dataset": {
								"referenceName": "DS_ADLS_XLSX_Zona",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared DS_ADLS_XLSX_Departamento = let AdfDoc = AzureStorage.DataLakeContents(\"https://adslteamsoftdf.dfs.core.windows.net/1-bronce/Maestros.xlsx\"), Excel = Excel.Workbook(AdfDoc),ExcelSheet = Excel{[Item=\"Departamento\",Kind=\"Sheet\"]}[Data], PromotedHeaders = Table.PromoteHeaders(ExcelSheet, [PromoteAllScalars = true]) in PromotedHeaders;\r\nshared DS_ADLS_XLSX_Zona = let AdfDoc = AzureStorage.DataLakeContents(\"https://adslteamsoftdf.dfs.core.windows.net/1-bronce/Maestros.xlsx\"), Excel = Excel.Workbook(AdfDoc),ExcelSheet = Excel{[Item=\"Zona\",Kind=\"Sheet\"]}[Data], PromotedHeaders = Table.PromoteHeaders(ExcelSheet, [PromoteAllScalars = true]) in PromotedHeaders;\r\nshared UserQuery = let Source = #\"DS_ADLS_XLSX_Departamento\",\r\n  #\"Removed columns\" = Table.RemoveColumns(Source, {\"DepartamentoPais\", \"Departamento\"}),\r\n  #\"Merged queries\" = Table.NestedJoin(#\"Removed columns\", {\"ZonaID\"}, DS_ADLS_XLSX_Zona, {\"ZonaID\"}, \"DS_ADLS_XLSX_Zona\", JoinKind.LeftOuter),\r\n  #\"Expanded DS_ADLS_XLSX_Zona\" = Table.ExpandTableColumn(#\"Merged queries\", \"DS_ADLS_XLSX_Zona\", {\"Zona\"}, {\"Zona\"}),\r\n  #\"Removed columns 1\" = Table.RemoveColumns(#\"Expanded DS_ADLS_XLSX_Zona\", {\"ZonaID\"}) in #\"Removed columns 1\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_Ingesta_AdventureWorks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Carga RRHH-Mst",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_SQL_to_ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Grupo": "RRHH-Mst"
							}
						}
					},
					{
						"name": "Carga Venta-Mst",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Carga RRHH-Mst",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_SQL_to_ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Grupo": "Venta-Mst"
							}
						}
					},
					{
						"name": "Cargar Venta-Trn",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Cargar RRHH-Trn",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_SQL_to_ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Grupo": "Venta-Trn"
							}
						}
					},
					{
						"name": "Cargar RRHH-Trn",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Carga Venta-Mst",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_SQL_to_ADLS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Grupo": "RRHH-Trn"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Modulo 5"
				},
				"annotations": [],
				"lastPublishTime": "2024-07-20T16:48:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_LimpiezaDepartamentoZona')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LimpiezaDepartamentoZona",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "powerquery1",
								"type": "DataFlowReference",
								"datasetParameters": {
									"DS_ADLS_XLSX_Departamento": {},
									"DS_ADLS_XLSX_Zona": {},
									"UserQueryDSADLSParquetDepartamento": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryDSADLSParquetDepartamento",
											"dataset": {
												"referenceName": "DS_ADLS_Parquet_Departamento",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UserQueryDSADLSParquetDepartamento"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1-Bronce"
				},
				"annotations": [],
				"lastPublishTime": "2024-07-20T15:45:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/powerquery1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_S3_to_ADLS_PARQUET_Movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData_S3_ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "movie",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movie",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "year",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "year",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Rating",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "RottenTomato",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RottenTomato",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_S3_CSV_Movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_Parquet_Movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CleanData_Movies",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CopyData_S3_ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_TRAN_CLEAN_MOVIES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceADLSMovies": {},
									"SinkUpsertIfTrue": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "1-Bronce"
				},
				"annotations": [],
				"lastPublishTime": "2024-07-13T17:06:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_TRAN_CLEAN_MOVIES')]"
			]
		}
	]
}